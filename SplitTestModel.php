<?php

/**
 * Model for split test
 */
class SplitTestModel
{

    /**
     * max value could be generated by hash
     */
    CONST MAX_HASH_VALUE = 4294967295;

    /**
     * default split variant name by experiments
     */
    CONST DEFAULT_VARIANT_VALUE = 'default';

    /**
     * key, using for experiments
     *
     * @var string
     */
    protected $_splitKey = '';


    /**
     * @var string
     */
    protected $_config_path = '/path/to/config/';

    /**
     * @var array
     */
    protected $_config = array();


    /**
     * result variants for user by experiments
     *
     * @var string
     */
    protected $_splitVariants = array();

    protected static $_instances = array();

    /**
     * @param string $key
     * @return new self
     */
    public static function getInstance($key = '')
    {

        if( empty(self::$_instances[$key]) ) {
            self::$_instances[$key] = new self($key);
        }
        return self::$_instances[$key];

    }


    private function __construct( $key )
    {
        //by default as key use user ip
        $this->_splitKey = !empty($key) ? $key : $_SERVER['REMOTE_ADDR'];

        //set config
        $this->_loadConfig();
    }


    /**
     * return user variant by current experiment
     *
     * @param $experimentName
     * @return string
     */
    public function getSplitVariantByExperiment( $experimentName )
    {

        if( empty($this->_splitVariants[$experimentName]) ) {

            $defaultVariant = self::DEFAULT_VARIANT_VALUE;

            if( !empty($this->_config[$experimentName]) &&
                $experimentParams = $this->_config[$experimentName]
            ) {

                //uniform check sum of current key
                $checksum = $this->_getChecksum($this->_splitKey);

                //percent of max value
                $percent = $checksum / self::MAX_HASH_VALUE * 100;

                $totalPercent = 0;

                //if isset default value in params, by default use it
                if( in_array('*', $experimentParams) ) {
                    $defaultVariant = array_search('*', $experimentParams);
                    unset($experimentParams[$defaultVariant]);
                }

                foreach( $experimentParams as $key => $value ) {

                    $totalPercent += (int) $value;

                    if( $percent <= $totalPercent ) {
                        $this->_splitVariants[$experimentName] = $key;
                        break;
                    }

                }

            } else {
               trigger_error("Experiment $experimentName doesn`t exist", E_USER_ERROR);
            }

            $this->_splitVariants[$experimentName] = !empty($this->_splitVariants[$experimentName])
                    ? $this->_splitVariants[$experimentName] : $defaultVariant;

        }

        return $this->_splitVariants[$experimentName];

    }

    protected function _getChecksum($key)
    {

        $checksum = ( function_exists('murmurhash') ? murmurhash($key) : crc32($key) );

        return $checksum < 0 ? (self::MAX_HASH_VALUE + $checksum + 1) : $checksum;

    }

    protected function _loadConfig()
    {
        if (is_file($this->_config_path))
        {
            $config = require($this->_config_path);
            if (is_array($config))
            {
                $this->_config = $config;
            }
        }
    }

}